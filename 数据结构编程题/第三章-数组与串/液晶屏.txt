5: 数组与串-液晶屏
题目描述
液晶屏上，每个阿拉伯数字都是可以显示成 3×5 的点阵的（其中 X 表示亮点，. 表示暗点）。现在给出数字位数（不超过 100）和一串数字，要求输出这些数字在显示屏上的效果。数字的显示方式如同样例输出，注意每个数字之间都有一列间隔。

输入描述
第一行输入一个正整数 n，表示数字的位数。
第二行输入一个长度为 n 的自然数

输出描述
输出五行，表示显示屏上的数字。
有些同学反应看不懂，这里观察一下就知道了
每个数字是一个3×5的矩阵
每个数字之间用一个1×5的.相隔
这里输出有点显示字符占位不一样，导致显示问题。
这里我添加一张图片方便大家观察

输入输出样例
输入：

10
0123456789
输出：

XXX...X.XXX.XXX.X.X.XXX.XXX.XXX.XXX.XXX
X.X...X...X...X.X.X.X...X.....X.X.X.X.X
X.X...X.XXX.XXX.XXX.XXX.XXX...X.XXX.XXX
X.X...X.X.....X...X...X.X.X...X.X.X...X
XXX...X.XXX.XXX...X.XXX.XXX...X.XXX.XXX
image.png



#include <iostream>
#include <string>
#include <cstring>

using namespace std;


int main()
{
	//把数字表写出
	char numarr[10][5][3] =//numarr[i][j][k]表示第i个数字的第j行的第k列.
	{
		{//0
			'X','X','X',
			'X','.','X',
			'X','.','X',
			'X','.','X',
			'X','X','X',
		},
		{//1
			'.','.','X',
			'.','.','X',
			'.','.','X',
			'.','.','X',
			'.','.','X',
		},
		{//2
			'X','X','X',
			'.','.','X',
			'X','X','X',
			'X','.','.',
			'X','X','X',
		},
		{//3
			'X','X','X',
			'.','.','X',
			'X','X','X',
			'.','.','X',
			'X','X','X',
		},
		{//4
			'X','.','X',
			'X','.','X',
			'X','X','X',
			'.','.','X',
			'.','.','X',
		},
		{//5
			'X','X','X',
			'X','.','.',
			'X','X','X',
			'.','.','X',
			'X','X','X',
		},
		{//6
			'X','X','X',
			'X','.','.',
			'X','X','X',
			'X','.','X',
			'X','X','X',
		},
		{//7
			'X','X','X',
			'.','.','X',
			'.','.','X',
			'.','.','X',
			'.','.','X',
		},
		{//8
			'X','X','X',
			'X','.','X',
			'X','X','X',
			'X','.','X',
			'X','X','X',
		},
		{//9
			'X','X','X',
			'X','.','X',
			'X','X','X',
			'.','.','X',
			'X','X','X',
		}
	};

	char ansarr[5][1024];		//模拟电子屏幕
	//初始化屏幕用点填充
	memset(ansarr, '.', static_cast<size_t>(5 * 1024));
	//存储要显示的数据
	string s;
	//数字个数
	int n;
	cin >> n;
	cin >> s;
	//给屏幕填充
	for (int i = 0; i < n; i++)
		for (int j = 0; j < 5; j++)
			for (int k = 0; k < 3; k++)
				ansarr[j][k + (i * 4)] = numarr[(s[i] - '0')][j][k];
				//一个数字3列加上一个空列是四列，s[i]-'0'得到当前数字
	//显示屏幕
	for (int i = 0; i < 5; i++)
	{
		//一个数字3列加上一个空列是四列但是最后一行没有空列所以减一
		//所以需要显示的屏幕长度为n * 4 - 1
		for (int j = 0; j < n * 4 - 1; j++)
			cout << ansarr[i][j];
		cout << endl;
	}
	return 0;
}