7: 两数相加Ⅱ
描述
给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。
你可以假设除了数字 0 之外，这两个数字都不会以零开头。
输入
链表的长度范围为 [1, 100]
0 <= node.val <= 9
输入数据保证链表代表的数字无前导 0
-1表示链表结束符
输出
输出链表
输入样例

7 2 4 3 -1
5 6 4 -1 
输出样例

7 8 0 7







#include<stdio.h>
#include<stdlib.h>
#include<math.h>

struct ListNode
{
    int val;
    struct ListNode *next;
    
};

struct ListNode *creat()   
{
    struct ListNode *head, *p1, *p2;
    p1 = p2 = (struct ListNode*)malloc(sizeof(struct ListNode));
    char c;
    scanf("%d",&p1->val);
    head=NULL;
    int n=0;
    while(p1->val!=-1)         
    {
        n=n+1;
        if(n==1)                
            head=p1;            
        else                     
            p2->next=p1;             
        p2=p1;
        p1=(struct ListNode*)malloc(sizeof(struct ListNode));
        scanf("%d",&p1->val);

    }                         
    p2->next=NULL;
    return(head);
}

void print(struct ListNode *head)
{
    struct ListNode *p = head->next; 
    while(p != NULL)
    {
        printf("%d ",p->val);
        p=p->next;
    }
}

struct ListNode* linksum(struct ListNode* l1, struct ListNode* l2)
{
	struct ListNode *p1, *p11, *p2 ,*p22;
	p1 = p11 = l1;
	p2 = p22 = l2;
	int cur1 = 0;
	int cur2 = 0;
	int num1 = 0;
	int num2 = 0;
	int num;
	while(p1){
		p1 = p1->next;
		cur1++;
	}
	while(p11){
		num1 += (p11->val)*pow(10,cur1-1);
		p11 = p11->next;
		cur1--;
	}
	while(p2){
		p2 = p2->next;
		cur2++;
	}
	while(p22){
		num2 += (p22->val)*pow(10,cur2-1);
		p22 = p22->next;
		cur2--;
	}
	num = num1 + num2;
	int temp;
	struct ListNode *sum, *p;
	sum = (struct ListNode*)malloc(sizeof(struct ListNode));
	sum->next = NULL;
	while (num){
		p=(struct ListNode*)malloc(sizeof(struct ListNode));
		temp = num%10;
		num = num/10;
		p->val = temp;
		p->next = sum->next;
		sum->next = p;

	}
	return sum;
}

int main()
{
	struct ListNode *l1, *l2, *l3;
	l1 = creat();
	l2 = creat();
	l3 = linksum(l1,l2);
	print(l3);
	return 0;
}