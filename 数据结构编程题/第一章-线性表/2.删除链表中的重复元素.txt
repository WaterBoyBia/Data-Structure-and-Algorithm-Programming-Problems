2: 删除排序链表中的重复元素
描述
给定一个已排序的链表的头 head ， 删除所有重复的元素，使每个元素只出现一次 。返回已排序的链表 
输入
输入已排序的链表，链表中节点数目在范围 [0, 300] 内，-100 <= Node.val <= 100，题目数据保证链表已经按升序排列
-1表示链表结束符
输出
输出已排序的链表
输入样例

1 1 2 3 3 -1
输出样例

1 2 3




#include<stdio.h>
#include<stdlib.h>

struct ListNode
{
    int val;
    struct ListNode *next;
    
};
struct ListNode* deleteDuplicates(struct ListNode* head)
{
    struct ListNode *p = head;
    while (p != NULL && p->next != NULL)
    {
        //如果找到当前节点和它的下一个结点的值相同，删除掉下一个结点
        if (p->next->val == p->val)
        {
            p->next = p->next->next;//跳过下一个结点 
        }
        else
        {
            //如果没有找到，当前节点后移
            p = p->next;
        }
    }
    return head;
}
struct ListNode *creat()   //指针函数
{
    struct ListNode *head, *p1, *p2;
    p1 = p2 = (struct ListNode*)malloc(sizeof(struct ListNode));
    char c;
    scanf("%d",&p1->val);
    head=NULL;
    int n=0;
    while(p1->val!=-1)         //-1输入结束
    {
        n=n+1;
        if(n==1)
            head=p1;            //第一个，置头指针
        else
            p2->next=p1;               //新开结点接上
        p2=p1;
        p1=(struct ListNode*)malloc(sizeof(struct ListNode));
        scanf("%d",&p1->val);

    }                         //p1指向新开结点，p2指向最后结点
    p2->next=NULL;
    return(head);
}
void print(struct ListNode *head)
{
    struct ListNode *p = head;
    while(p != NULL)
    {
        printf("%d ",p->val);
        p=p->next;
    }
    printf("\n");
}
int main()
{
    struct ListNode *p;
    p = creat();
    p = deleteDuplicates(p);
    print(p);
    return 0;
}