4: 从尾到头打印链表
描述
输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。
输入
输入链表，0 <= 链表长度 <= 10000
-1表示链表结束符
输出
输出反转后的链表
输入样例

1 2 6 3 4 5 6 -1 
输出样例

6 5 4 3 6 2 1







#include<stdio.h>
#include<stdlib.h>

struct ListNode
{
    int val;
    struct ListNode *next;
    
};

struct ListNode *creat()   
{
    struct ListNode *head, *p1, *p2;
    p1 = p2 = (struct ListNode*)malloc(sizeof(struct ListNode));
    char c;
    scanf("%d",&p1->val);
    head=NULL;
    int n=0;
    while(p1->val!=-1)   
    {
        n=n+1;
        if(n==1)
            head=p1;          
        else
            p2->next=p1;              
        p2=p1;
        p1=(struct ListNode*)malloc(sizeof(struct ListNode));
        scanf("%d",&p1->val);

    }                       
    p2->next=NULL;
    return(head);
}

void print(struct ListNode *head)
{
    struct ListNode *p = head;
    while(p != NULL)
    {
        printf("%d ",p->val);
        p=p->next;
    }
    printf("\n");
}

struct ListNode* reverse(struct ListNode* head) 
{
	if(head==NULL) return NULL;
	
	struct ListNode *n1, *n2, *n3;
	n1=NULL;
	n2=head;
	n3=n2->next;
	
	while(n2){
		n2->next=n1;//头节点指向空变成尾节点
		n1=n2;
		n2=n3;
		if(n3){
			n3=n3->next;
		} 
	}
	return n1;
}
//先将头节点变成尾节点，然后将其余节点依次指向前一个节点
int main()
{
	struct ListNode *p;
	p=creat();
	p=reverse(p);
	print(p);
	return 0;
}