3: 移除链表元素
描述
给你一个链表的头节点 head 和一个整数val ，请你删除链表中所有满足 Node.val == val 的节点，并返回新的头节点
输入
输入链表和val，列表中的节点数目在范围 [0, 10^4] 内，1 <= Node.val <= 50，0 <= val <= 50
-1表示链表结束符
输出
输出移除元素的链表
输入样例

1 2 6 3 4 5 6 -1 6 
输出样例

1 2 3 4 5





#include<stdio.h>
#include<stdlib.h>

struct ListNode
{
    int val;
    struct ListNode *next;
    
};

struct ListNode *creat()   //指针函数
{
    struct ListNode *head, *p1, *p2;
    p1 = p2 = (struct ListNode*)malloc(sizeof(struct ListNode));
    char c;
    scanf("%d",&p1->val);
    head=NULL;
    int n=0;
    while(p1->val!=-1)        
    {
        n=n+1;
        if(n==1)
            head=p1;            
        else
            p2->next=p1;              
        p2=p1;
        p1=(struct ListNode*)malloc(sizeof(struct ListNode));
        scanf("%d",&p1->val);

    }                        
    p2->next=NULL;
    return(head);
}

void print(struct ListNode *head)
{
    struct ListNode *p = head;
    while(p != NULL)
    {
        printf("%d ",p->val);
        p=p->next;
    }
    printf("\n");
}

struct ListNode* removeElements(struct ListNode* head, int val)
{
	if (head==NULL)
	{
		return NULL;
	}
	struct ListNode* p = NULL;
	struct ListNode* cur = head;
	while (cur)
	{
		if (cur->val == val)
		{
			//若开头即为所要删除的元素 
			if (cur == head)	
			{
				head = cur->next;
				free(cur);
				cur = head;
			}
			else
			{
				//删除
				p->next = cur->next;
				free(cur);
				cur = p->next;
			}
		}
		else
		{
			p = cur;
			cur = cur->next;
		}
	}
	return head;
}

int main()
{
	struct ListNode *p;
	int temp,t;
    p = creat();
    scanf("%d",&temp);
    p = removeElements(p,temp);
    print(p);
    return 0;
}