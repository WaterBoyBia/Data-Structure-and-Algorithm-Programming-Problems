1: 合并两个有序链表
描述
将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
输入
输入两个顺序表l1，l2，l1和l2均按非递减顺序排列，两个链表的节点数目范围是 [0, 50]，-100 <= Node.val <= 100
-1表示链表结束符
输出
输出合并后的顺序表
输入样例

1 2 4 -1
1 3 4 -1
输出样例

1 1 2 3 4 4






#include<stdio.h>
#include<stdlib.h>

struct ListNode
{
    int val;
    struct ListNode *next;
    
};

struct ListNode *creat()   //指针函数
{
    struct ListNode *head, *p1, *p2;
    p1 = p2 = (struct ListNode*)malloc(sizeof(struct ListNode));//分配内存返回地址 
    char c;
    scanf("%d",&p1->val);
    head=NULL;
    int n=0;
    while(p1->val!=-1)         //-1输入结束
    {
        n=n+1;
        if(n==1)                
            head=p1;            //第一个，置头指针
        else                    //第二个数据后 
            p2->next=p1;               //新开结点接上
        p2=p1;
        p1=(struct ListNode*)malloc(sizeof(struct ListNode));
        scanf("%d",&p1->val);

    }                         //p1指向新开结点，p2指向最后结点
    p2->next=NULL;
    return(head);
}

void print(struct ListNode *head)//输出 
{
    struct ListNode *p = head;
    while(p != NULL)
    {
        printf("%d ",p->val);
        p=p->next;
    }
    printf("\n");
}

struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){    
  
	struct ListNode* l3, *t;    
	l3=(struct ListNode*)malloc(sizeof(struct ListNode));    
	l3->next = NULL;    
	t=l3;    
	while(l1!=NULL&&l2!=NULL)    //l1和l2中较小的插入l3的尾部
	{
		if(l1->val<l2->val)        
		{            
			t->next = l1;            
			l1 = l1->next;            
	       
		}        
		else        
		{            
			t->next = l2;            
			l2 = l2->next;            
		       
		}        
		t = t->next;    
	}    
	//l1,l2中还有剩余结点    
	if(l1)t->next = l1;    
	if(l2)t->next = l2;    
	return l3->next;
}

int main()
{
	struct ListNode *l1,*l2,*l3;
    l1 = creat();
    l2 = creat();
    l3 = mergeTwoLists(l1,l2);
    print(l3);
    return 0;
    
}